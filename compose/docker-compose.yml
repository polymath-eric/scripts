services:
  mesh:
    image: ${CHAIN_IMAGE:-polymeshassociation/polymesh:latest-develop-debian}
    init: true # Faster shutdown by container process not be PID 1
    restart: unless-stopped
    ports: # expose ports to localhost
      - '9944:9944' # ws://
      - '9933:9933' # http://
      - '30333:30333' # for other nodes
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    volumes:
      - './chain-entry.sh:/chain-entry.sh'
    entrypoint: '/chain-entry.sh'
    command:
      [
        '--alice --chain dev',
      ]

  postgres:
    image: postgres:12-alpine
    restart: unless-stopped
    ports:
      - ${PG_PORT:-5432}:5432
    volumes:
      - './pg-extensions.sh:/docker-entrypoint-initdb.d/load-extensions.sh'
    environment:
      POSTGRES_PASSWORD: postgres

  rest-api:
    image: ${REST_IMAGE:-polymeshassociation/polymesh-rest-api:latest}
    init: true
    restart: unless-stopped
    depends_on:
      - mesh
      - vault
      - graphql-server
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    ports:
      - ${REST_PORT:-3004}:3000
    environment:
      POLYMESH_NODE_URL: 'ws://mesh:9944'
      POLYMESH_MIDDLEWARE_V2_URL: 'http://graphql-engine:3000'
      LOCAL_SIGNERS: 'alice,bob,charlie'
      LOCAL_MNEMONICS: '//Alice,//Bob,//Charlie'
      AUTH_STRATEGY: 'open'
      DEVELOPER_UTILS: 'true'

  subquery:
    image: '${SUBQUERY_IMAGE:-polymeshassociation/polymesh-subquery:latest}'
    init: true
    restart: unless-stopped
    depends_on:
      - 'postgres'
    environment:
      NETWORK_ENDPOINT: ws://mesh:9944
      NETWORK_HTTP_ENDPOINT: http://mesh:9933
      DB_USER: '${PG_USER:-postgres}'
      DB_PASS: '${PG_PASSWORD:-postgres}'
      DB_DATABASE: '${PG_DB:-postgres}'
      DB_PORT: '${PG_PORT:-5432}'
      DB_HOST: '${PG_HOST:-postgres}'
      NODE_ENV: local
    command:
      - --batch-size=500
      - -f=/app
      - --local

  graphql-server:
    image: onfinality/subql-query:v1.0.0
    ports:
      - ${SQ_PORT:-3001}:3000
    depends_on:
      - 'postgres'
      - 'subquery'
    restart: always
    environment:
      DB_DATABASE: postgres
      DB_USER: '${PG_USER:-postgres}'
      DB_PASS: '${PG_PASSWORD:-postgres}'
      DB_PORT: '${PG_PORT:-5432}'
      DB_HOST: '${PG_HOST:-postgres}'
    command:
      - --name=public
      - --playground
      - --indexer=http://subquery:3000

  # IMPORTANT - `docker volume create vault-volume` needs to be ran
  vault:
    image: vault:${VAULT_VERSION:-latest}
    profiles:
      - vault
    restart: unless-stopped
    ports:
      - ${VAULT_PORT:-8200}:8200
    volumes:
      - vault-volume:/vault/data:rw
      - ./vault:/vault/config:rw
    cap_add:
      - IPC_LOCK # Prevents secrets from swapping to disk
    entrypoint: vault server -config=/vault/config/vault.json

  vault-rest-api:
    profiles:
      - vault
    image: ${REST_IMAGE:-polymeshassociation/polymesh-rest-api:latest}
    init: true
    restart: unless-stopped
    depends_on:
      - mesh
      - vault
      - graphql-server
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    ports:
      - ${VAULT_REST_PORT:-3014}:3000
    environment:
      POLYMESH_NODE_URL: 'ws://mesh:9944'
      POLYMESH_MIDDLEWARE_V2_URL: 'http://graphql-engine:3000'
      VAULT_URL: 'http://vault:8200/v1/transit'
      VAULT_TOKEN: ${VAULT_TOKEN} # read from env
      AUTH_STRATEGY: 'open'
      DEVELOPER_UTILS: 'true'

volumes:
  vault-volume:
    external: true
